name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: '17'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build project
      run: ./mvnw -B -DskipTests clean package
      
    - name: Run OWASP Dependency-Check
      run: ./mvnw org.owasp:dependency-check-maven:check -Dformat=ALL
      
    - name: Run SpotBugs with FindSecBugs
      run: ./mvnw spotbugs:check -Dspotbugs.failOnError=false
      continue-on-error: true
      
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ github.run_number }}
        path: |
          target/dependency-check-report.*
          target/spotbugsXml.xml
          target/spotbugs.html
        retention-days: 30
        
    - name: Comment PR with security scan results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          let comment = '## üîç Security Scan Results\n\n';
          
          // Check for dependency vulnerabilities
          try {
            const depCheckPath = 'target/dependency-check-report.xml';
            if (fs.existsSync(depCheckPath)) {
              const depCheckContent = fs.readFileSync(depCheckPath, 'utf8');
              const criticalCount = (depCheckContent.match(/severity="CRITICAL"/g) || []).length;
              const highCount = (depCheckContent.match(/severity="HIGH"/g) || []).length;
              const mediumCount = (depCheckContent.match(/severity="MEDIUM"/g) || []).length;
              
              comment += `### üìä OWASP Dependency-Check Results\n`;
              comment += `- üî¥ Critical: ${criticalCount}\n`;
              comment += `- üü† High: ${highCount}\n`;
              comment += `- üü° Medium: ${mediumCount}\n\n`;
              
              if (criticalCount > 0 || highCount > 0) {
                comment += `‚ö†Ô∏è **Warning**: Critical or High severity vulnerabilities found!\n`;
                comment += `Please review the dependency-check report and address these issues.\n\n`;
              } else {
                comment += `‚úÖ No critical or high severity vulnerabilities found!\n\n`;
              }
            }
          } catch (error) {
            comment += `‚ùå Error reading dependency-check report: ${error.message}\n\n`;
          }
          
          // Check for SpotBugs issues
          try {
            const spotbugsPath = 'target/spotbugsXml.xml';
            if (fs.existsSync(spotbugsPath)) {
              const spotbugsContent = fs.readFileSync(spotbugsPath, 'utf8');
              const bugCount = (spotbugsContent.match(/<BugInstance/g) || []).length;
              
              comment += `### üêõ SpotBugs Results\n`;
              comment += `- Total issues found: ${bugCount}\n\n`;
              
              if (bugCount > 0) {
                comment += `‚ö†Ô∏è **Warning**: ${bugCount} potential issues found by SpotBugs.\n`;
                comment += `Please review the SpotBugs report for details.\n\n`;
              } else {
                comment += `‚úÖ No issues found by SpotBugs!\n\n`;
              }
            }
          } catch (error) {
            comment += `‚ùå Error reading SpotBugs report: ${error.message}\n\n`;
          }
          
          comment += `üìã **Reports**: Check the "security-reports" artifact for detailed reports.\n`;
          comment += `üìö **Documentation**: See [docs/Verification.md](docs/Verification.md) for validation steps.\n`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
          
    - name: Fail on critical vulnerabilities
      if: github.event_name == 'pull_request'
      run: |
        if [ -f "target/dependency-check-report.xml" ]; then
          CRITICAL_COUNT=$(grep -c 'severity="CRITICAL"' target/dependency-check-report.xml || echo "0")
          HIGH_COUNT=$(grep -c 'severity="HIGH"' target/dependency-check-report.xml || echo "0")
          
          if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ]; then
            echo "‚ùå Critical or High severity vulnerabilities found!"
            echo "Critical: $CRITICAL_COUNT, High: $HIGH_COUNT"
            echo "Please address these issues before merging."
            exit 1
          fi
        fi
        
  codeql:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: java
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
